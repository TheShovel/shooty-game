{"framerate":0,"highQualityPen":true,"maxClones":9999999999,"fencing":false,"miscLimits":false,"stageWidth":640,"loadingScreen":{"progressBar":false,"text":"","imageMode":"normal","image":null},"penguinmod":{"permissionManager":{"unsandboxedJavascript":true,"enabled":false}},"turbo":false,"interpolation":false,"stageHeight":360,"resizeMode":"preserve-ratio","autoplay":true,"username":"player####","closeWhenStopped":false,"projectId":"p4-@swordFight.pmp","custom":{"css":"","js":""},"appearance":{"background":"#000000","foreground":"#ffffff","accent":"#00c3ff"},"controls":{"greenFlag":{"enabled":false},"stopAll":{"enabled":false},"fullscreen":{"enabled":false},"pause":{"enabled":false}},"monitors":{"editableLists":false,"variableColor":"#ff8c1a","listColor":"#fc662c"},"compiler":{"enabled":true,"warpTimer":false},"packagedRuntime":true,"target":"html","app":{"icon":null,"packageName":"swordfight","windowTitle":"Shooty game","windowMode":"window","version":"1.0.0"},"chunks":{"gamepad":false,"pointerlock":false},"cloudVariables":{"mode":"ws","cloudHost":"wss://clouddata.turbowarp.org","custom":{},"specialCloudBehaviors":false,"unsafeCloudBehaviors":false},"cursor":{"type":"auto","custom":null,"center":{"x":0,"y":0}},"extensions":["https://extensions.turbowarp.org/Lily/TempVariables2.js","data:text/javascript;base64,","https://extensions.turbowarp.org/TheShovel/ShovelUtils.js","https://extensions.turbowarp.org/cloudlink.js","https://extensions.turbowarp.org/Skyhigh173/json.js","https://extensions.turbowarp.org/utilities.js","https://extensions.turbowarp.org/Lily/MoreTimers.js"],"bakeExtensions":true,"maxTextureDimension":2048}